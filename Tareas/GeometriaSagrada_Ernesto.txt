#include <windows.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include<cmath>
#include <stdlib.h>
#define M_PI 3.1415

float blanco[]={1,1,1};
float negro[]={0,0,0},azul[]={0,0,1};
float rojo[]={1,0,0},verde[]={0,1,0}, amarillo[]={1,1,0};
float cyan[]={0,1,1}, rosa[]={1,0.5,0.5}, naranja[]={1,0.8,0}, gris[]={0.6,0.6,0.6};

void inicio ()
{
    glMatrixMode(GL_PROJECTION);
    int a=3;
    gluOrtho2D(-a,a,-a,a);
}


void circulos (float x, float y, float r, int m, float theta1, float theta2, float n, float *color, float l)
{
    glColor3fv(color);
    glLineWidth(l);
    glBegin(GL_LINE_STRIP);

    for(float i=0;i<n;i++)
    {
        for (float T=theta1 ; T<theta2 ;T=T+0.01)
        {
            switch (m)
            {
                case 1: glVertex2f(r*cos(T)+x,r*sin(T)+y+2*r*i); break;
                case 2: glVertex2f(r*cos(T)+x+2*r*i,r*sin(T)+y); break;
            }

        }
    }
    glEnd();
}

void lineas(int x, int y,int x1, int y1,int x2, int y2, int x3, int y3,int x4, int y4,int x5, int y5,float *rgb)
{
     glColor3fv(rgb);
     glBegin(GL_LINE_LOOP);
     glVertex2d(x,y);
     glVertex2d(x1,y1);
     glVertex2d(x2,y2);
     glVertex2d(x3,y3);
     glVertex2d(x4,y4);
     glVertex2d(x5,y5);
     glEnd();
}

void triangulos(int x, int y,int x1, int y1,int x2, int y2, float *rgb)
{
     glColor3fv(rgb);
     glBegin(GL_LINE_LOOP);
     glVertex2d(x,y);
     glVertex2d(x1,y1);
     glVertex2d(x2,y2);
     glEnd();
}

void display(void)
{
    glClearColor(1,1,1,1);
    glClear(GL_COLOR_BUFFER_BIT);
    
      
    circulos(-0.01,-2.04,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,4,negro,3);
    circulos(-0.61,-1.71,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,3,negro,3);
    circulos(-1.18,-1.35,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,3,negro,3);
    circulos(-1.78,-1,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,2,negro,3);
    circulos(0.58,-1.71,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,3,negro,3);
    circulos(1.16,-1.36,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,3,negro,3);
    circulos(1.75,-1.01,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,2,negro,3);

    circulos(-0.01,-1.35,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,3,negro,3);
    circulos(-0.6,-1.01,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,3,negro,3);
    circulos(-1.18,-0.7,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,2,negro,3);
    circulos(-1.76,-0.33,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,2,negro,3);

    circulos(0.57,-1.01,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,3,negro,3);
    circulos(1.16,-0.69,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,2,negro,3);
    circulos(1.75,-0.34,sqrt(0.46),1,3*M_PI/2,9*M_PI/2,2,negro,3);



    glutSwapBuffers();
}


int main(int argc, char *argv[])
{
    glutInit(&argc, argv); //Inicializar la ventana

    glutInitDisplayMode(GLUT_RGB|GLUT_DOUBLE|GLUT_DEPTH);//Especifica el tipo de modo de visualizacion al crear una ventana(Activa el buffer de colores de tipo RGB

    glutInitWindowPosition(10,10);//Posicion de la ventana
    glutInitWindowSize(600,600); //TamaÃ±o de la ventana
    glutCreateWindow("EstrellaRara"); //Nombre que se le da a la ventana
    glutDisplayFunc(display);


    inicio();


    glutMainLoop(); //Hace que aparezca la ventana
    return EXIT_SUCCESS; //Puedes colocar tambien Return 0

}
