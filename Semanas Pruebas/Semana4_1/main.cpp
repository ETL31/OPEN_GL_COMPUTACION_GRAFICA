#include <windows.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include <stdlib.h>

float black[] = {0,0,0}, white[]={1,1,1}, blue[] = {0,0,1};
float red[] = {1,0,0}, green[]={0,1,0}, yellow[]={1,1,0};
float cyan[]={0,1,1}, pink[]={1,0.5,0.5}, orange[]={1,0.5,0};

void robot(float Ax,float Ay, float Bx,float By, float Cx,float Cy, float Dx,float Dy, float *color , int P)
{

GLubyte mosca[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08 } ;

GLubyte halftone[] = {
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55};


    switch (P)
{
       case 1:
           glEnable(GL_POLYGON_STIPPLE);
glPolygonStipple(mosca);
    break;
       case 2: glEnable(GL_POLYGON_STIPPLE);
glPolygonStipple(halftone);
    break;
    default:
    break;


}
glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
glColor3fv(color);
glBegin(GL_POLYGON);
glVertex2f(Ax,Ay);
glVertex2f(Bx,By);
glVertex2f(Cx,Cy);
glVertex2f(Dx,Dy);
glEnd();
glDisable(GL_POLYGON_STIPPLE);
}


void display(void)
{
    glClearColor (0.1,0.2,0.2,0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); //limpia el color, y el otro se encarga de los buffers
    robot(-0.9,0.4,-0.9,0.3,0.9,0.3,0.9,0.4, orange,0);
    robot(-0.15,0.465,-0.15,0.65,0.15,0.65,0.15,0.465, red,2); //cabeza
    robot(-0.1,0.41,-0.1,0.46,0.1,0.46,0.1,0.41,green,0);//cuello
    robot(-0.3,0.4,0,0.4,0,0,-0.3,0,blue,1);//pecho
    robot(0.3,0.4,0,0.4,0,0,0.3,0,blue,1);//pecho
    robot(-0.8,0.42,-0.8,0.28,-0.6,0.28,-0.6,0.42,blue,1);//pulsera
    robot(0.6,0.42,0.6,0.28,0.8,0.28,0.8,0.42,blue,1);//pulsera
    robot(-0.2,0,-0.2,-0.3,0,-0.3,0,0,green,2);//entre pierna
    robot(0.2,0,0.2,-0.3,0,-0.3,0,0,green,2);//entre pierna
    robot(-0.2,-0.1,-0.3,-0.1,-0.3,-0.5,-0.2,-0.5,yellow,0);//pierna
    robot(0.2,-0.1,0.3,-0.1,0.3,-0.5,0.2,-0.5,yellow,0);//pierna
    robot(-0.32,-0.5,-0.32,-0.7,-0.18,-0.7,-0.18,-0.5,pink,0);//parte del pie
    robot(0.32,-0.5,0.32,-0.7,0.18,-0.7,0.18,-0.5,pink,0);//parte del pie
    robot(-0.35,-0.705,-0.35,-0.76,-0.15,-0.76,-0.15,-0.705,black,0);//pie
    robot(0.35,-0.705,0.35,-0.76,0.15,-0.76,0.15,-0.705,black,0);//pie
    robot(-2,-0.76,5,-0.76,2,-2,-2,-2,green,0);



    glutSwapBuffers();//limpia la consola,
    //glFlush();
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv); //inicializando
    glutInitWindowSize(800,900); //tamaño de la ventana
    glutInitWindowPosition(10,10); //posicion de la ventana
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
    glutCreateWindow("Ajedrez"); //nombre de la ventana
    glutDisplayFunc(display);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-2,2,-2,2);

    glutMainLoop(); //que aparesca la consola

    return EXIT_SUCCESS;
}
